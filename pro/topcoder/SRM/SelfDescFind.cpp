#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

#ifdef BTK
#    define DEBUG if (1)
#else
#    define DEBUG if (0)
#endif

#define ALL(v) (v).begin(), (v).end()
#define REC(ret, ...) std::function<ret(__VA_ARGS__)>
template <typename T>
inline bool chmin(T &l, T r) {
    bool a = l > r;
    if (a) l = r;
    return a;
}
template <typename T>
inline bool chmax(T &l, T r) {
    bool a = l < r;
    if (a) l = r;
    return a;
}
template <typename T>
istream &operator>>(istream &is, vector<T> &v) {
    for (auto &it : v) is >> it;
    return is;
}

class range {
  private:
    struct I {
        int x;
        int operator*() { return x; }
        bool operator!=(I &lhs) { return x < lhs.x; }
        void operator++() { ++x; }
    };
    I i, n;

  public:
    range(int n) : i({0}), n({n}) {}
    range(int i, int n) : i({i}), n({n}) {}
    I &begin() { return i; }
    I &end() { return n; }
};


class SelfDescFind {
  public:
    string construct(vector<int>);
};

template <typename ITR>
bool next_value(int base, ITR bg, ITR ed) {
    int c = 1;
    for (; bg != ed && c == 1; ++bg) {
        (*bg) += c;
        if ((c = ((*bg) == base))) (*bg) = 0;
    }
    return !c;
}

using V = vector<int>;
string cr_ret(V b) {
    string ret = "";
    for (int i : b) {
        ret = ret + string(1, '0' + i);
    }
    return ret;
}

string minimize(string s) {
    int n = s.size() / 2;
    vector<string> x;
    for (int i : range(n)) {
        x.push_back(string(1, s[i * 2]) + string(1, s[i * 2 + 1]));
    }
    sort(ALL(x));
    s = "";
    for (int i : range(n)) {
        s += x[i];
    }
    return s;
}
V calc_over(V s, int sgn) {
    V ret(10);
    int n = s.size() / 2;
    for (int i : range(n * 2)) {
        ret[s[i]] += sgn;
    }
    for (int i : range(n)) {
        ret[s[i * 2 + 1]] -= sgn * s[i * 2];
    }
    return ret;
}
string SelfDescFind::construct(vector<int> digits) {
    const int n = digits.size();
    if (n == 1) {
        if (digits.front() == 2) {
            return "22";
        }
        else {
            return "";
        }
    }
    const int h = n / 2;
    V half, other;
    for (int i : range(h)) {
        half.push_back(digits[i]);
    }
    for (int i : range(h, n)) {
        other.push_back(digits[i]);
    }
    string ret(1, '9' + 1);
    string wa = ret;
    map<V, string> O;

    {
        V al(h);
        do {
            V seq;
            for (int i : range(h)) {
                seq.push_back(al[i] + 1);
                seq.push_back(half[i]);
            }
            V over = calc_over(seq, 1);
            if (O.count(over) == 0) {
                O[over] = wa;
            }
            chmin(O[over], minimize(cr_ret(seq)));
        } while (next_value(9, ALL(al)));
    }
    {
        V al(n - h);
        do {
            V seq;
            for (int i : range(n - h)) {
                seq.push_back(al[i] + 1);
                seq.push_back(other[i]);
            }
            if (O.count(calc_over(seq, -1))) {
                chmin(ret, minimize(cr_ret(seq) + O[calc_over(seq, -1)]));
            }
        } while (next_value(9, ALL(al)));
    }
    cerr << ret << endl;
    if (ret == wa)
        return "";
    else
        return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, bool hasAnswer,
                        string p1) {
    cout << "Test " << testNum << ": ["
         << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    SelfDescFind *obj;
    string answer;
    obj               = new SelfDescFind();
    clock_t startTime = clock();
    answer            = obj->construct(p0);
    clock_t endTime   = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
         << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t"
             << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t"
         << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer) {
        cout << "Match :-)" << endl;
    }
    else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector<int> p0;
    string p1;

    {
        // ----- test 0 -----
        int t0[] = {1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1        = "";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1        = "22";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {0, 1, 3, 4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1        = "10143133";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {0, 1, 2, 4, 5, 6, 8, 9};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1        = "";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {0, 1, 2, 3, 5, 6, 8, 9};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1        = "1016181923253251";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1        = "";
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
// Powered by [KawigiEdit] 2.0!


// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
