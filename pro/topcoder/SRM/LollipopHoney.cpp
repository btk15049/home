#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

#ifdef BTK
#    define DEBUG if (1)
#else
#    define DEBUG if (0)
#endif

#define ALL(v) (v).begin(), (v).end()
#define REC(ret, ...) std::function<ret(__VA_ARGS__)>
template <typename T>
inline bool chmin(T &l, T r) {
    bool a = l > r;
    if (a) l = r;
    return a;
}
template <typename T>
inline bool chmax(T &l, T r) {
    bool a = l < r;
    if (a) l = r;
    return a;
}
template <typename T>
istream &operator>>(istream &is, vector<T> &v) {
    for (auto &it : v) is >> it;
    return is;
}

class range {
  private:
    struct I {
        int x;
        int operator*() { return x; }
        bool operator!=(I &lhs) { return x < lhs.x; }
        void operator++() { ++x; }
    };
    I i, n;
  public:
    range(int n) : i({0}), n({n}) {}
    range(int i, int n) : i({i}), n({n}) {}
    I &begin() { return i; }
    I &end() { return n; }
};


class LollipopHoney {
  public:
    vector<int> count(int, vector<int>, vector<int>);
};


vector<int> LollipopHoney::count(int K, vector<int> flavor,
                                 vector<int> deliciousness) {}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector<int> p1, vector<int> p2,
                        bool hasAnswer, vector<int> p3) {
    cout << "Test " << testNum << ": [" << p0 << ","
         << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}"
         << ","
         << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}";
    cout << "]" << endl;
    LollipopHoney *obj;
    vector<int> answer;
    obj               = new LollipopHoney();
    clock_t startTime = clock();
    answer            = obj->count(p0, p1, p2);
    clock_t endTime   = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
         << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t"
             << "{";
        for (int i = 0; int(p3.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p3[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t"
         << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p3.size()) {
            res = false;
        }
        else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p3[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer) {
        cout << "Match :-)" << endl;
    }
    else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    vector<int> p1;
    vector<int> p2;
    vector<int> p3;

    {
        // ----- test 0 -----
        p0       = 1;
        int t1[] = {1, 1, 2, 2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {10, 20, 30, 40};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {60, 1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0       = 2;
        int t1[] = {1, 1, 1, 2, 2, 2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {10, 10, 10, 20, 20, 20};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {60, 9};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0       = 2;
        int t1[] = {1, 1, 1, 1, 1, 2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {10, 20, 30, 40, 50, 60};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0       = 3;
        int t1[] = {48, 33, 22, 9, 37, 44, 5, 49, 24, 14, 45, 1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {9, 1, 7, 10, 7, 10, 5, 1, 3, 3, 4, 5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {48, 2};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0       = 10;
        int t1[] = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14,
                    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                    29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {20, 846527861};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
// Powered by [KawigiEdit] 2.0!


// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
