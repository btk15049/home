#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
#define FOR(i,bg,ed) for(int i=(bg);i<(ed);i++)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define fi first
#define se second
#define pb push_back
#define DEBUG if(0)
#define REC(ret, ...) std::function<ret (__VA_ARGS__)>
template <typename T>inline void chmin(T &l,T r){l=min(l,r);}
template <typename T>inline void chmax(T &l,T r){l=max(l,r);}
class DistinctGrid {
public:
    vector <int> findGrid(int n, int k) {
        vector<int> ret(n*n,0);
        int t=1;
        REP(i,n)REP(j,k-1)
            ret[n*i+(i+j)%n]=t++;
        return ret;

    }
};















// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DistinctGrid *obj;
	vector <int> answer;
	obj = new DistinctGrid();
	clock_t startTime = clock();
	answer = obj->findGrid(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
		if (hasAnswer) {
			cout << "Desired answer:" << endl;
			cout << "\t" << "{";
			for (int i = 0; int(p2.size()) > i; ++i) {
				if (i > 0) {
					cout << ",";
				}
				cout << p2[i];
			}
			cout << "}" << endl;
		}
		cout << "Your answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(answer.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << answer[i];
		}
		cout << "}" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	vector <int> p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 1;
	p2 = {0,0,0,0,0,0,0,0,0};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 6;
	p1 = 3;
	p2 = {1,0,0,0,0,2,0,3,0,0,4,0,0,0,5,6,0,0,0,0,7,8,0,0,0,9,0,0,10,0,11,0,0,0,0,12};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 4;
	p1 = 2;
	p2 = {123,999,999,999,999,999,999,456,999,789,999,999,999,999,240,999};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Given the integers n, k, construct an n by n grid of integers where each row and column has at most k distinct integers.
// The returned grid must have the maximum number of distinct integers.
// 
// 
// 
// Return your answer as a vector <int> with exactly n * n elements. Element i*n+j of your return value denotes the value of the integer in the i-th row and j-th column of the grid.
// 
// 
// 
// If there are multiple optimal solutions, you may return any of them.
// The integers in your solution can be arbitrary, as long as they fit into a signed 32-bit integer variable.
// 
// 
// DEFINITION
// Class:DistinctGrid
// Method:findGrid
// Parameters:int, int
// Returns:vector <int>
// Method signature:vector <int> findGrid(int n, int k)
// 
// 
// CONSTRAINTS
// -n will be between 3 and 50, inclusive.
// -k will be between 1 and n/2, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 1
// 
// Returns: {0, 0, 0, 0, 0, 0, 0, 0, 0 }
// 
// The returned value shown above represents the following grid:
// 
// {
//   0,0,0,
//   0,0,0,
//   0,0,0
// }
// 
// 
// 
// 
// 
// 1)
// 6
// 3
// 
// Returns: {1, 0, 0, 0, 0, 2, 0, 3, 0, 0, 4, 0, 0, 0, 5, 6, 0, 0, 0, 0, 7, 8, 0, 0, 0, 9, 0, 0, 10, 0, 11, 0, 0, 0, 0, 12 }
// 
// The returned value shown above represents the following grid:
// 
// {
//   1,0,0,0,0,2,
//   0,3,0,0,4,0,
//   0,0,5,6,0,0,
//   0,0,7,8,0,0,
//   0,9,0,0,10,0,
//   11,0,0,0,0,12
// }
// 
// 
// 
// 
// 
// 2)
// 4
// 2
// 
// Returns: {123, 999, 999, 999, 999, 999, 999, 456, 999, 789, 999, 999, 999, 999, 240, 999 }
// 
// The returned value shown above represents the following grid:
// 
// {
//   123,999,999,999,
//   999,999,999,456,
//   999,789,999,999,
//   999,999,240,999
// };
// 
// 
// 
// 
// 
// END KAWIGIEDIT TESTING
